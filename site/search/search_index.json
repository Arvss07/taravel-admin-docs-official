{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Tara-Vel Admin Documentation","text":"<ul> <li> <p> Quick Start</p> <p>Get up and running with Tara-Vel Admin in minutes</p> <p> Quick Start</p> </li> <li> <p> Architecture</p> <p>Understand the system design and technical architecture</p> <p> Architecture</p> </li> <li> <p> Features</p> <p>Explore the core functionality and capabilities</p> <p> Core Features</p> </li> <li> <p> Troubleshooting</p> <p>Contact us for any questions or support</p> <p> Contact Us</p> </li> </ul>"},{"location":"#about-tara-vel-admin","title":"About Tara-Vel Admin","text":"<p>Tara-Vel Admin is a comprehensive administrative dashboard for managing the Tara-Vel transportation platform. Built with modern web technologies, it provides powerful tools for user management, ID verification, and system monitoring.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Dashboard Analytics - Real-time insights and system overview</li> <li>User Management - Complete user lifecycle management</li> <li>Vehicle Management - Fleet administration and tracking</li> <li>ID Verification - Document verification workflow</li> <li>System Monitoring - Comprehensive logging and audit trails</li> <li>Secure Authentication - Firebase-based authentication system</li> </ul>"},{"location":"#tech-stack","title":"Tech Stack","text":"<ul> <li>Frontend: Next.js 15, React 18, TypeScript</li> <li>UI Framework: Radix UI, Tailwind CSS, shadcn/ui</li> <li>State Management: Redux Toolkit</li> <li>Backend: Firebase (Firestore and Authentication), Cloudinary (Image Bucket)</li> <li>Deployment: Vercel</li> <li>Development: ESLint, Prettier, Husky</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Ready to dive in? Start with our quick setup guide:</p> <p>Private Repository</p> <p>The Tara-Vel Admin repository is currently private. Contact the development team for access before proceeding with installation.</p> InstallationConfigurationDevelopment <pre><code># Note: Repository access required\ngit clone https://github.com/Arvss07/taravel-admin-official\ncd taravel-admin-official\nnpm install\n</code></pre> <pre><code>cp .env.example .env.local\n# Configure your environment variables\n</code></pre> <pre><code>npm run dev\n</code></pre>"},{"location":"#documentation-structure","title":"Documentation Structure","text":"<p>Our documentation is organized to help you find what you need quickly:</p> <ul> <li>Getting Started - Setup, configuration, and first steps</li> <li>Architecture - System design, tech stack, and data flow</li> <li>Core Features - Detailed feature documentation</li> <li>API Reference - Complete API endpoint documentation</li> <li>Components - UI components and reusable code</li> <li>Deployment - Production deployment guides</li> <li>Development - Contributing and development guidelines</li> </ul>"},{"location":"#need-help","title":"Need Help?","text":"<ul> <li>Browse our comprehensive documentation</li> <li>Report issues on GitHub</li> <li>Join our community discussions</li> <li>Contact the development team</li> </ul> <p>Last updated: October 2025</p>"},{"location":"architecture/system-overview/","title":"System Overview","text":"<p>The Tara-Vel Admin system is built with a modern, scalable architecture that leverages Next.js, Firebase, TanStack Query, and Redux to provide a robust administrative interface.</p>"},{"location":"architecture/system-overview/#high-level-architecture","title":"High-Level Architecture","text":"<pre><code>graph TB\n    subgraph Client[\"Client Layer\"]\n        A[Admin Dashboard]\n        B[Next.js App Router]\n        C[React Components]\n        D[TanStack Query]\n        E[Redux Store - UI State]\n    end\n\n    subgraph Auth[\"Authentication Layer\"]\n        F[Firebase Auth]\n        G[Middleware]\n        H[Route Protection]\n    end\n\n    subgraph Data[\"Data Layer\"]\n        I[Firestore Database]\n        J[Cloudinary]\n    end\n\n    subgraph API[\"API Layer\"]\n        K[Next.js API Routes]\n        L[Firebase Admin SDK]\n        M[External APIs]\n    end\n\n    A --&gt; B\n    B --&gt; C\n    C --&gt; D\n    C --&gt; E\n    D --&gt; K\n    E --&gt; F\n    F --&gt; G\n    G --&gt; H\n    H --&gt; K\n    K --&gt; L\n    L --&gt; I\n    L --&gt; J\n    K --&gt; M</code></pre>"},{"location":"architecture/system-overview/#core-components","title":"Core Components","text":""},{"location":"architecture/system-overview/#frontend-architecture","title":"Frontend Architecture","text":""},{"location":"architecture/system-overview/#nextjs-app-router-structure","title":"Next.js App Router Structure","text":"<pre><code>src/app/\n\u251c\u2500\u2500 layout.tsx             # Root layout with providers\n\u251c\u2500\u2500 page.tsx               # Home page\n\u251c\u2500\u2500 dashboard/             # Dashboard module\n\u251c\u2500\u2500 users/                 # User management\n\u251c\u2500\u2500 accounts/              # Account management\n\u251c\u2500\u2500 vehicles/              # Vehicle management\n\u251c\u2500\u2500 id-verification/       # Verification workflow\n\u251c\u2500\u2500 system-logs/           # System monitoring\n\u251c\u2500\u2500 auth/                  # Authentication pages\n\u2514\u2500\u2500 api/                   # API routes\n</code></pre>"},{"location":"architecture/system-overview/#component-architecture","title":"Component Architecture","text":"<pre><code>src/components/\n\u251c\u2500\u2500 ui/                    # Reusable UI components\n\u251c\u2500\u2500 layout/                # Layout components\n\u251c\u2500\u2500 dashboard/             # Dashboard-specific components\n\u251c\u2500\u2500 users/                 # User management components\n\u251c\u2500\u2500 accounts/              # Account management components\n\u251c\u2500\u2500 vehicles/              # Vehicle management components\n\u251c\u2500\u2500 verification/          # Verification components\n\u2514\u2500\u2500 logs/                  # Logging components\n</code></pre>"},{"location":"architecture/system-overview/#state-management","title":"State Management","text":""},{"location":"architecture/system-overview/#tanstack-query-redux-architecture","title":"TanStack Query + Redux Architecture","text":"<p>The application uses a hybrid state management approach:</p> <ul> <li>TanStack Query: Handles all server state (data fetching, caching, synchronization)</li> <li>Redux: Manages only UI state (modals, filters, pagination, selections)</li> </ul>"},{"location":"architecture/system-overview/#redux-store-structure-ui-state-only","title":"Redux Store Structure (UI State Only)","text":"<pre><code>interface RootState {\n  auth: AuthState;           // Authentication state\n  users: UsersState;         // UI state for user management\n  accounts: AccountsState;   // UI state for account management\n  vehicles: VehiclesState;   // UI state for vehicle management\n  verification: VerificationState; // UI state for ID verification\n  logs: LogsState;          // UI state for system logs\n  settings: SettingsState;  // UI state for settings\n}\n</code></pre>"},{"location":"architecture/system-overview/#tanstack-query-structure","title":"TanStack Query Structure","text":"<pre><code>// Query keys for consistent caching\nconst queryKeys = {\n  verification: {\n    all: [\"verification\"],\n    stats: () =&gt; [\"verification\", \"stats\"],\n    list: (filters) =&gt; [\"verification\", \"list\", filters],\n    detail: (id) =&gt; [\"verification\", \"detail\", id],\n  },\n  account: {\n    all: [\"account\"],\n    list: (filters) =&gt; [\"account\", \"list\", filters],\n    detail: (id) =&gt; [\"account\", \"detail\", id],\n  },\n  // ... other entities\n};\n</code></pre>"},{"location":"architecture/system-overview/#state-flow","title":"State Flow","text":"<pre><code>sequenceDiagram\n    participant C as Component\n    participant TQ as TanStack Query\n    participant R as Redux Store\n    participant A as API\n    participant F as Firebase\n\n    C-&gt;&gt;TQ: useQuery() / useMutation()\n    TQ-&gt;&gt;A: API Call\n    A-&gt;&gt;F: Firebase Operation\n    F--&gt;&gt;A: Response\n    A--&gt;&gt;TQ: Data\n    TQ-&gt;&gt;TQ: Cache &amp; Process\n    TQ--&gt;&gt;C: Return Data\n\n    Note over C,R: UI State Management\n    C-&gt;&gt;R: Dispatch UI Action\n    R-&gt;&gt;R: Update UI State\n    R--&gt;&gt;C: State Update\n    C-&gt;&gt;C: Re-render</code></pre>"},{"location":"architecture/system-overview/#data-flow-architecture","title":"Data Flow Architecture","text":""},{"location":"architecture/system-overview/#authentication-flow","title":"Authentication Flow","text":"<pre><code>sequenceDiagram\n    participant U as User\n    participant A as App\n    participant F as Firebase Auth\n    participant S as Server\n\n    U-&gt;&gt;A: Login Request\n    A-&gt;&gt;F: Authenticate\n    F--&gt;&gt;A: JWT Token\n    A-&gt;&gt;S: Verify Token\n    S--&gt;&gt;A: User Data\n    A-&gt;&gt;A: Update State\n    A--&gt;&gt;U: Redirect to Dashboard</code></pre>"},{"location":"architecture/system-overview/#data-fetching-flow","title":"Data Fetching Flow","text":"<pre><code>sequenceDiagram\n    participant C as Component\n    participant QH as Query Hook\n    participant QC as Query Client\n    participant S as Service\n    participant F as Firestore\n\n    C-&gt;&gt;QH: useQuery(params)\n    QH-&gt;&gt;QC: Check Cache\n    alt Cache Hit\n        QC--&gt;&gt;QH: Cached Data\n    else Cache Miss\n        QH-&gt;&gt;S: fetchData()\n        S-&gt;&gt;F: Query\n        F--&gt;&gt;S: Data\n        S--&gt;&gt;QH: Processed Data\n        QH-&gt;&gt;QC: Update Cache\n    end\n    QH--&gt;&gt;C: Return Data\n    C-&gt;&gt;C: Render</code></pre>"},{"location":"architecture/system-overview/#database-schema","title":"Database Schema","text":""},{"location":"architecture/system-overview/#firestore-collections","title":"Firestore Collections","text":""},{"location":"architecture/system-overview/#users-collection","title":"Users Collection","text":"<pre><code>interface User {\n  // Firebase Auth fields\n  uid: string;\n  email: string;\n\n  // Firestore metadata fields\n  name: string;\n  role: \"admin\"; // Only admin role is supported\n  createdAt: string;\n  status: \"active\" | \"blocked\";\n  contactNumber?: string;\n\n  // Optional fields\n  lastLogin?: string;\n  blocked_at?: string;\n  blocked_reason?: string;\n}\n</code></pre>"},{"location":"architecture/system-overview/#accounts-collection","title":"Accounts Collection","text":"<pre><code>interface Account {\n  // General properties\n  accountId: string;\n  accountType: \"organization\" | \"individual\";\n  serviceType: \"bus\" | \"van\";\n  username: string;\n  accessKeyHash: string;\n  displayName: string;\n  profilePictureUrl?: string;\n  status: \"active\" | \"blocked\";\n  createdAt: string;\n  createdBy: string;\n  email?: string;\n  contactNumber: string;\n  secondaryContactNumber?: string;\n  contactPerson?: string;\n\n  // Audit trail fields\n  editedAt?: string;\n  editedBy?: string;\n\n  organizationId?: string;\n  organizationName?: string;\n  vehicleTypeId?: string;\n  location?: { lat: number; lng: number };\n}\n</code></pre>"},{"location":"architecture/system-overview/#vehicles-collection","title":"Vehicles Collection","text":"<pre><code>interface VehicleType {\n  id: string;\n  name: string;\n  description: string;\n  capacity: number;\n  seatingArrangement: string;\n  vtype: \"bus\" | \"van\";\n  createdAt: string;\n  updatedAt: string;\n  status: \"active\" | \"maintenance\" | \"inactive\";\n}\n</code></pre>"},{"location":"architecture/system-overview/#verifications-collection","title":"Verifications Collection","text":"<pre><code>type IdType = \"student\" | \"senior\" | \"pwd\" | \"other\";\n\n/**\n * Possible verification status values\n */\ntype VerificationStatus = \"valid\" | \"invalid\" | \"pending\" | \"rejected\";\n\n/**\n * Main verification interface\n */\ninterface Verification {\n  // Core identification\n  id: string;\n  idNumber: string;\n  idType: IdType;\n  status: VerificationStatus;\n\n  // Timestamps\n  timestamp: string; // When initially uploaded\n  createdAt?: string;\n  updatedAt?: string;\n\n  // Image handling\n  imageUrl?: string; // Single primary image URL\n  imageUrls?: string[]; // Array of Firebase image URLs\n\n  // User information\n  uploaderId: string; // References User.userId (Firebase Auth)\n  uploaderName: string; // References User.name\n\n  // Verification details\n  rejectionReason?: string; // Required when status is \"rejected\"\n\n  // Admin verification tracking\n  adminVerifierId?: string; // ID of admin who processed the verification\n  adminVerifierName?: string; // Name of admin who processed the verification\n  verifiedAt?: string; // Timestamp when verification was completed\n\n  // Expiration handling - Single source of truth\n  expirationDate?: string; // Date when ID expires (for student IDs)\n\n  // Revalidation system\n  needsRevalidation?: boolean;\n\n  // Discount percentage (stored as decimal: 0.20 for 20%)\n  discountPercentage?: number;\n\n  // Additional metadata\n  ipAddress?: string; // IP address when uploaded (for security)\n  userAgent?: string; // Browser/device info when uploaded\n}\n</code></pre>"},{"location":"architecture/system-overview/#security-architecture","title":"Security Architecture","text":""},{"location":"architecture/system-overview/#authentication-authorization","title":"Authentication &amp; Authorization","text":"<p>The Tara-Vel Admin system implements a comprehensive security model with the following key features:</p>"},{"location":"architecture/system-overview/#admin-only-access-control","title":"Admin-Only Access Control","text":"<ul> <li>Single Role System: Only <code>admin</code> role is supported for the admin dashboard</li> <li>Automatic Role Validation: Non-admin users are automatically logged out upon login attempt</li> <li>Session Management: Real-time monitoring of user status with automatic blocking</li> </ul>"},{"location":"architecture/system-overview/#authentication-flow_1","title":"Authentication Flow","text":"<pre><code>// Auth context implementation\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const [user, setUser] = useState&lt;User | null&gt;(null);\n  const [profile, setProfile] = useState&lt;FirestoreUserProfile | null&gt;(null);\n\n  const fetchUserProfile = async (uid: string) =&gt; {\n    const userDoc = await getDoc(doc(db, \"users\", uid));\n    const profileData = userDoc.data() as FirestoreUserProfile;\n\n    // Check if user is admin - reject all non-admin users\n    if (profileData.role !== ROLES.ADMIN) {\n      await firebaseSignOut(auth);\n      return {\n        success: false,\n        error: \"Access denied. Only admin users can access this system.\"\n      };\n    }\n\n    return { success: true };\n  };\n}\n</code></pre>"},{"location":"architecture/system-overview/#real-time-status-monitoring","title":"Real-time Status Monitoring","text":"<ul> <li>Live Block Detection: Continuous monitoring of user status via Firestore listeners</li> <li>Automatic Session Termination: Users are immediately logged out if blocked</li> <li>Blocked Page Redirect: Seamless redirect to blocked status page with reason</li> </ul>"},{"location":"architecture/system-overview/#authentication-constants","title":"Authentication Constants","text":"<pre><code>// Centralized auth-related constants\nexport const ROLES = {\n  ADMIN: \"admin\", // Only admin role is supported\n} as const;\n\nexport const ACCOUNT_STATUS = {\n  ACTIVE: \"active\",\n  BLOCKED: \"blocked\",\n} as const;\n\nexport const STORAGE_KEYS = {\n  USER_PROFILE_PREFIX: \"user-profile-\",\n  BLOCKED_REDIRECT: \"blocked-redirect\",\n} as const;\n</code></pre>"},{"location":"architecture/system-overview/#session-management-features","title":"Session Management Features","text":"<ul> <li>Profile Caching: 5-minute cache for admin profiles to prevent repeated fetches</li> <li>Session Tracking: Prevents duplicate session logging per browser session</li> <li>Storage Management: Automatic cleanup of authentication-related cache on logout</li> <li>Error Handling: Comprehensive logging of authentication events and errors</li> </ul>"},{"location":"architecture/system-overview/#data-security","title":"Data Security","text":""},{"location":"architecture/system-overview/#firestore-security-rules","title":"Firestore Security Rules","text":"<pre><code>rules_version = '2';\n\nservice cloud.firestore {\n  match /databases/{database}/documents {\n\n    // Helper function to check if user is authenticated\n    function isAuthenticated() {\n      return request.auth != null;\n    }\n\n    // Helper function to check if user is admin\n    function isAdmin() {\n      return isAuthenticated() &amp;&amp; \n             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &amp;&amp;\n             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n    }\n\n    // Users collection - Contains both travel users and admin users\n    match /users/{userId} {\n      // Users can read their own profile, admins can read any profile\n      allow read: if isAuthenticated() &amp;&amp; \n                     (request.auth.uid == userId || isAdmin());\n\n      // Users can create/update their own profile, admins can manage any user\n      allow write: if isAuthenticated() &amp;&amp; \n                      (request.auth.uid == userId || isAdmin());\n    }\n\n    // Allow admins to list all users (for admin dashboard)\n    match /users/{document=**} {\n      allow read: if isAdmin();\n    }\n\n    // Verifications collection - Users can create/delete their own, admins can manage all\n    match /verifications/{verificationId} {\n      // Users can read their own verifications, admins can read all\n      allow read: if isAuthenticated() &amp;&amp; \n                    (isVerificationOwner(verificationId) || isAdmin());\n\n      // Users can create verifications (upload their IDs)\n      allow create: if isAuthenticated();\n\n      // Users can delete their own verifications, admins can delete any\n      allow delete: if isAuthenticated() &amp;&amp; \n                      (isVerificationOwner(verificationId) || isAdmin());\n\n      // Only admins can update verifications (approve/reject/change status)\n      allow update: if isAdmin();\n\n      // Helper function to check if user owns the verification\n      function isVerificationOwner(verificationId) {\n        return isAuthenticated() &amp;&amp; \n              exists(/databases/$(database)/documents/verifications/$(verificationId)) &amp;&amp;\n              get(/databases/$(database)/documents/verifications/$(verificationId)).data.uploaderId == request.auth.uid;\n      }\n    }\n\n    // Accounts collection - Driver/conductor accounts (not connected to Firebase Auth)\n    match /accounts/{accountId} {\n      // Allow read access for everyone (public)\n      allow read: if true;\n\n      // Only authenticated admins can write/update accounts\n      allow write: if isAdmin();\n\n      // Only authenticated admins can delete accounts\n      allow delete: if isAdmin();\n    }\n\n    // Vehicles collection - Admin management\n    match /vehicles/{vehicleId} {\n      allow read: if true;\n\n      // Only admins can create/update vehicles\n      allow write: if isAdmin();\n\n      // Only authenticated admins can delete vehicles\n      allow delete: if isAdmin();\n    }\n\n    // Log audit collection - Admin read-only access\n    match /log_audit/{logId} {\n      // Only admins can read audit logs\n      allow read: if isAdmin();\n\n      // Only allow writes for audit logging (server-side or admin)\n      allow write: if isAdmin();\n    }\n\n    // Images collection - Multiple access patterns\n    match /images/{imageId} {\n      allow read: if isAuthenticated() &amp;&amp; \n                     (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'user' || \n                      get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin') ||\n                  // Unauthenticated access for account collection users\n                  (request.auth == null &amp;&amp; isAccountAccessAllowed(imageId));\n\n      // Only authenticated admins can write\n      allow write: if isAuthenticated() &amp;&amp; \n                     get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';\n\n      // Helper function to check account/organization access for unauthenticated users\n      function isAccountAccessAllowed(imageId) {\n        let imageData = get(/databases/$(database)/documents/images/$(imageId)).data;\n        let imageAccountId = imageData.accountId;\n\n        // Check if there's an account document that matches the image's accountId\n        let accountDoc = get(/databases/$(database)/documents/accounts/$(imageAccountId));\n\n        return exists(/databases/$(database)/documents/accounts/$(imageAccountId)) &amp;&amp;\n               // For organization accounts: image accountId matches organizationId\n               (accountDoc.data.organizationId == imageAccountId ||\n                // For individual accounts: image accountId matches account document ID\n                imageAccountId == imageAccountId);\n      }\n    }\n\n    // Deny all other access\n    match /{document=**} {\n      allow read: if true;\n      allow write, update, delete: if false;\n    }\n  }\n}\n</code></pre>"},{"location":"architecture/system-overview/#security-features","title":"Security Features","text":"<ul> <li>Role-based Access Control: Admin-only access for administrative operations</li> <li>User Data Isolation: Users can only access their own data</li> <li>Admin Write Access: Only admins can modify critical data</li> <li>Audit Trail Protection: Log audit collection is admin-only</li> </ul>"},{"location":"architecture/system-overview/#performance-architecture","title":"Performance Architecture","text":""},{"location":"architecture/system-overview/#caching-strategy","title":"Caching Strategy","text":"<ul> <li>Client-side caching with Redux store</li> <li>Image optimization with Cloudinary</li> </ul>"},{"location":"architecture/system-overview/#optimization-techniques","title":"Optimization Techniques","text":"<ul> <li>Code splitting with Next.js dynamic imports</li> <li>Image optimization with Next.js Image component</li> <li>Lazy loading for non-critical components</li> </ul>"},{"location":"architecture/system-overview/#deployment-architecture","title":"Deployment Architecture","text":""},{"location":"architecture/system-overview/#monitoring-observability","title":"Monitoring &amp; Observability","text":""},{"location":"architecture/system-overview/#logging-strategy","title":"Logging Strategy","text":"<ul> <li>Application logs via Firebase</li> <li>Performance monitoring with Vercel Analytics</li> <li>Error tracking with built-in error boundaries</li> <li>User activity tracking for audit trails</li> </ul>"},{"location":"architecture/system-overview/#health-checks","title":"Health Checks","text":"<ul> <li>System health endpoints for monitoring</li> <li>Database connectivity checks</li> <li>External service status monitoring</li> </ul> <p>Next: Learn about the Tech Stack in detail.</p>"},{"location":"architecture/tech-stack/","title":"Tech Stack","text":"<p>This document provides a comprehensive overview of the technologies and tools used in the Tara-Vel Admin application.</p>"},{"location":"architecture/tech-stack/#frontend-technologies","title":"Frontend Technologies","text":"<ul> <li> <p> Next.js 15</p> <p>React framework with App Router</p> <ul> <li>Server-side rendering (SSR)</li> <li>Static site generation (SSG)</li> <li>API routes for backend functionality</li> <li>Built-in optimization features</li> </ul> </li> <li> <p> React 18</p> <p>Modern UI library with advanced features</p> <ul> <li>Hooks and functional components</li> <li>Context API for state management</li> <li>Concurrent features and Suspense</li> <li>Component-based architecture</li> </ul> </li> <li> <p> TypeScript</p> <p>Type-safe JavaScript for better development</p> <ul> <li>Static type checking</li> <li>Better IDE support</li> <li>Reduced runtime errors</li> <li>Enhanced code documentation</li> </ul> </li> <li> <p> Tailwind CSS</p> <p>Utility-first CSS framework</p> <ul> <li>Rapid UI development</li> <li>Consistent design system</li> <li>Responsive design utilities</li> <li>Custom component styling</li> </ul> </li> <li> <p> Radix UI</p> <p>Accessible component primitives</p> <ul> <li>Headless UI components</li> <li>Built-in accessibility</li> <li>Customizable styling</li> <li>Keyboard navigation</li> </ul> </li> <li> <p> shadcn/ui</p> <p>Pre-built component library</p> <ul> <li>Ready-to-use components</li> <li>Consistent styling</li> <li>Easy customization</li> <li>Copy-paste components</li> </ul> </li> <li> <p> TanStack Query</p> <p>Powerful data synchronization for React</p> <ul> <li>Intelligent caching</li> <li>Background refetching</li> <li>Optimistic updates</li> <li>Error handling and retries</li> </ul> </li> <li> <p> Redux Toolkit</p> <p>Predictable state container for UI state</p> <ul> <li>UI state management (modals, filters, pagination)</li> <li>Time-travel debugging</li> <li>Middleware support</li> <li>Simplified state updates</li> </ul> </li> <li> <p> React Redux</p> <p>React bindings for Redux</p> <ul> <li>Hooks for state access</li> <li>Performance optimizations</li> <li>Component re-rendering control</li> <li>Seamless integration</li> </ul> </li> </ul>"},{"location":"architecture/tech-stack/#backend-services","title":"Backend Services","text":"<ul> <li> <p> Firebase Authentication</p> <p>Secure user authentication system</p> <ul> <li>User authentication</li> <li>Email/password authentication</li> <li>Security rules</li> <li>User management</li> <li>Role-based access control</li> </ul> </li> <li> <p> Cloud Firestore</p> <p>NoSQL document database</p> <ul> <li>Real-time updates</li> <li>Scalable architecture</li> <li>Offline support</li> <li>Automatic scaling</li> <li>Complex queries</li> </ul> </li> <li> <p> Cloudinary</p> <p>Cloud-based image management</p> <ul> <li>Image optimization</li> <li>Transformations</li> <li>CDN delivery</li> <li>Format conversion</li> <li>Video processing</li> </ul> </li> </ul>"},{"location":"architecture/tech-stack/#development-tools","title":"Development Tools","text":"<ul> <li> <p> ESLint</p> <p>Code linting and quality assurance</p> <ul> <li>JavaScript/TypeScript linting</li> <li>Custom rules configuration</li> <li>IDE integration</li> <li>Automated fixes</li> <li>Best practices enforcement</li> </ul> </li> <li> <p> Prettier</p> <p>Code formatting and style consistency</p> <ul> <li>Consistent code style</li> <li>Automatic formatting</li> <li>IDE integration</li> <li>Configurable rules</li> <li>Team collaboration</li> </ul> </li> <li> <p> Husky</p> <p>Git hooks for quality control</p> <ul> <li>Pre-commit hooks</li> <li>Code quality checks</li> <li>Automated testing</li> <li>Commit message validation</li> </ul> </li> </ul>"},{"location":"architecture/tech-stack/#deployment-hosting","title":"Deployment &amp; Hosting","text":"<ul> <li> <p> Vercel</p> <p>Modern hosting platform for web applications</p> <ul> <li>Frontend hosting</li> <li>Automatic deployments</li> <li>Edge functions</li> <li>Performance monitoring</li> <li>Global CDN</li> </ul> </li> <li> <p> Custom Domain</p> <p>Professional domain and SSL management</p> <ul> <li>Professional branding</li> <li>SSL certificates</li> <li>DNS management</li> <li>HTTPS enforcement</li> <li>Custom subdomains</li> </ul> </li> </ul>"},{"location":"architecture/tech-stack/#third-party-integrations","title":"Third-Party Integrations","text":"<ul> <li> <p> Lucide React</p> <p>Beautiful icon library for React</p> <ul> <li>Consistent iconography</li> <li>SVG-based icons</li> <li>Tree-shakable</li> <li>Customizable</li> <li>Lightweight</li> </ul> </li> </ul>"},{"location":"architecture/tech-stack/#development-environment","title":"Development Environment","text":"<ul> <li> <p> npm</p> <p>Package manager for Node.js</p> <ul> <li>Dependency management</li> <li>Script execution</li> <li>Version control</li> <li>Security auditing</li> <li>Registry access</li> </ul> </li> <li> <p> Git</p> <p>Version control system</p> <ul> <li>Source control</li> <li>Branch management</li> <li>Commit history</li> <li>Collaboration</li> <li>Backup and recovery</li> </ul> </li> <li> <p> VS Code</p> <p>Integrated development environment</p> <ul> <li>TypeScript support</li> <li>Extensions ecosystem</li> <li>Debugging capabilities</li> <li>Integrated terminal</li> <li>IntelliSense</li> </ul> </li> </ul>"},{"location":"architecture/tech-stack/#performance-optimization","title":"Performance &amp; Optimization","text":"<ul> <li> <p> Dynamic Imports</p> <p>Code splitting and lazy loading</p> <ul> <li>Lazy loading</li> <li>Reduced bundle size</li> <li>Faster initial load</li> <li>On-demand loading</li> </ul> </li> <li> <p> Next.js Image</p> <p>Optimized image handling</p> <ul> <li>Automatic format selection</li> <li>Responsive images</li> <li>Lazy loading</li> <li>WebP optimization</li> </ul> </li> <li> <p> Browser Caching</p> <p>Efficient caching strategies</p> <ul> <li>Static assets caching</li> <li>Long-term caching</li> <li>Cache invalidation</li> <li>Performance improvement</li> </ul> </li> </ul>"},{"location":"architecture/tech-stack/#security","title":"Security","text":"<ul> <li> <p> Firebase Auth</p> <p>Secure authentication system</p> <ul> <li>JWT tokens</li> <li>Role-based access</li> <li>Session management</li> <li>Multi-factor authentication</li> </ul> </li> <li> <p> Firestore Security Rules</p> <p>Database security and access control</p> <ul> <li>Access control</li> <li>Data validation</li> <li>User isolation</li> <li>Admin privileges</li> </ul> </li> <li> <p> SSL/TLS</p> <p>Encrypted communication</p> <ul> <li>Data encryption</li> <li>Certificate validation</li> <li>Secure headers</li> <li>HTTPS enforcement</li> </ul> </li> </ul>"},{"location":"architecture/tech-stack/#monitoring-analytics","title":"Monitoring &amp; Analytics","text":"<ul> <li> <p> Built-in Error Boundaries</p> <p>Error handling and recovery</p> <ul> <li>Graceful error recovery</li> <li>User experience protection</li> <li>Error logging</li> <li>Fallback UI</li> </ul> </li> <li> <p> Vercel Analytics</p> <p>Performance monitoring and insights</p> <ul> <li>Core Web Vitals</li> <li>User experience metrics</li> <li>Performance optimization</li> <li>Real-time monitoring</li> </ul> </li> </ul> <p>This tech stack provides a solid foundation for building and maintaining the Tara-Vel Admin application with modern web development practices.</p>"},{"location":"contact-us/contact-us/","title":"Contact Us","text":"<p>Get in touch with the Tara-Vel Development Team for support, questions, or collaboration opportunities.</p>"},{"location":"contact-us/contact-us/#tara-vel-platform","title":"Tara-Vel Platform","text":"<ul> <li> <p> Tara-Vel Website</p> <p>Visit our main platform website</p> <p> Visit taravel.app</p> </li> <li> <p> Phone Support</p> <p>Call us for immediate assistance</p> <p> +63 905 232 7405</p> </li> <li> <p> Email Support</p> <p>Send us an email for detailed inquiries</p> <p> taravelofficial.ph@gmail.com</p> </li> <li> <p> Facebook Messenger</p> <p>Chat with us on Facebook Messenger</p> <p> Message Us</p> </li> </ul> <p>We're here to help you succeed with the Tara-Vel platform. Don't hesitate to reach out!</p> <p>Last updated: October 2025</p>"},{"location":"features/account-management/","title":"Account Management","text":"<p>The Account Management section handles both organization accounts and individual accounts, including sub-accounts. It includes credential generation, status control (active/blocked), organization details, and pagination with filtering.</p>"},{"location":"features/account-management/#overview","title":"Overview","text":"<ul> <li>Account Types: Organization and Individual</li> <li>Service Types: Bus or Van</li> <li>Sub-Accounts: Create accounts under an organization</li> <li>Credentials: Securely generate credentials and view them in a modal</li> <li>Status Control: Active / Blocked with audit fields</li> <li>Filtering &amp; Search: By status, account type, service type, plus search in table</li> <li>Pagination: Client-side paging per current dataset</li> </ul>"},{"location":"features/account-management/#crud-operations","title":"CRUD Operations","text":""},{"location":"features/account-management/#create","title":"Create","text":"<ul> <li>Add Organization or Individual</li> <li>For Organization: sub-accounts can be added after creation</li> <li>Credentials: generate and show via Credential Modal (copy-once UX)</li> </ul>"},{"location":"features/account-management/#read","title":"Read","text":"<ul> <li>List view with pagination and filter panel</li> <li>Table supports in-row actions: view, edit, add sub-account, delete</li> <li>Detail modals for Organization and Individual accounts</li> </ul>"},{"location":"features/account-management/#update","title":"Update","text":"<ul> <li>Edit account status (active/blocked)</li> <li>Edit account details (contact info, display name, service type)</li> <li>Edit organization details and manage sub-accounts</li> </ul>"},{"location":"features/account-management/#delete","title":"Delete","text":"<ul> <li>Delete account (with confirmation modal)</li> <li>Cascade considerations: sub-accounts visibility and organization relations</li> </ul>"},{"location":"features/account-management/#search-filtering","title":"Search &amp; Filtering","text":""},{"location":"features/account-management/#search-table-level","title":"Search (table-level)","text":"<ul> <li>Search across <code>displayName</code>, <code>username</code></li> </ul>"},{"location":"features/account-management/#filters-slice-level","title":"Filters (slice-level)","text":"<ul> <li>Status: all, active, blocked</li> <li>Account Type: organization, individual</li> <li>Service Type: all, bus, van</li> </ul>"},{"location":"features/account-management/#pagination","title":"Pagination","text":"<ul> <li>Page, pageSize with hasNextPage/hasPrevPage indicators</li> </ul>"},{"location":"features/account-management/#data-flow","title":"Data Flow","text":""},{"location":"features/account-management/#account-management-architecture","title":"Account Management Architecture","text":"<pre><code>graph TB\n    subgraph Page[Account List Page]\n        ALP[AccountListPage]\n        Table[AccountTable]\n    end\n\n    subgraph Modals[Modals]\n        AddAcc[Add Account]\n        AddSub[Add Sub-Accounts]\n        Cred[Credential Modal]\n        EditStatus[Edit Status]\n        OrgView[Organization Details]\n        IndView[Individual Details]\n    end\n\n    subgraph State[State Management]\n        Redux[Redux Store - UI State]\n        TQ[TanStack Query - Server State]\n    end\n\n    subgraph Data[Data Sources]\n        FS[Firestore Accounts]\n        VT[Vehicle Types]\n        Cache[Query Cache]\n    end\n\n    ALP --&gt; Table\n    ALP --&gt; AddAcc\n    ALP --&gt; AddSub\n    ALP --&gt; Cred\n    ALP --&gt; EditStatus\n    ALP --&gt; OrgView\n    ALP --&gt; IndView\n\n    ALP --&gt; Redux\n    ALP --&gt; TQ\n    TQ --&gt; FS\n    TQ --&gt; VT\n    TQ --&gt; Cache</code></pre>"},{"location":"features/account-management/#usage-guide","title":"Usage Guide","text":""},{"location":"features/account-management/#managing-accounts","title":"Managing Accounts","text":"<ol> <li>Open Accounts in the sidebar</li> <li>Adjust filters (status, account type, service type)</li> <li>Use table search to find specific accounts</li> <li>Use actions to View / Edit / Add Sub-Account / Delete</li> </ol>"},{"location":"features/account-management/#credential-handling","title":"Credential Handling","text":"<ul> <li>Use the Credential Modal to view generated credentials</li> <li>Copy credentials securely; they may not be shown again</li> </ul>"},{"location":"features/account-management/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>Accounts not updating? </li> <li>Check TanStack Query cache - data may be cached</li> <li>Use browser DevTools to inspect query cache</li> <li>Try manual refresh or clear query cache</li> <li>Search not finding expected results? </li> <li>Check filters and search field</li> <li>Verify query parameters are correct</li> <li>Permission errors? </li> <li>Ensure admin authentication and role</li> <li>Check Firebase security rules</li> <li>Slow loading?</li> <li>Check network tab for failed requests</li> <li>Verify query keys are properly configured</li> <li>Consider adjusting stale time settings</li> </ul> <p>Next: Learn about User Management.</p>"},{"location":"features/dashboard/","title":"Dashboard","text":"<p>The Dashboard is the central hub of the Tara-Vel Admin system, providing administrators with real-time insights into system performance, verification activity, and key metrics. It serves as the primary interface for monitoring and managing the entire Tara-Vel platform.</p>"},{"location":"features/dashboard/#overview","title":"Overview","text":"<p>The Dashboard serves as the landing page for authenticated administrators, offering comprehensive monitoring and management capabilities:</p> <ul> <li>System Overview - Health checks, domain status, and system performance monitoring</li> <li>Verification Statistics - Real-time metrics for pending, approved, rejected, and attention-needed verifications</li> <li>Recent Activity - Latest verification submissions and system events</li> <li>Quick Actions - Direct navigation to key management sections</li> <li>Real-time Updates - Live data refresh and caching for optimal performance</li> </ul>"},{"location":"features/dashboard/#dashboard-components","title":"Dashboard Components","text":""},{"location":"features/dashboard/#system-overview-card","title":"System Overview Card","text":"<p>The System Overview Card provides comprehensive system health monitoring and performance metrics.</p> <p>Key Features: - Firebase Health Monitoring - Real-time Firebase Auth and Firestore status - Domain Connectivity Checks - Website domain availability - Vercel Deployment Status - Production deployment monitoring - System Performance Metrics - Response times and latency tracking - Manual Refresh Capability - Force refresh all system data</p>"},{"location":"features/dashboard/#data-sources","title":"Data Sources:","text":"<ul> <li><code>/api/system/overview</code> - Aggregated system status</li> <li><code>/api/system/health/firebase</code> - Firebase service health</li> <li><code>/api/system/health/domain</code> - Domain connectivity status</li> <li><code>/api/system/deployment/vercel</code> - Deployment status</li> </ul>"},{"location":"features/dashboard/#statistics-cards","title":"Statistics Cards","text":"<p>Four interactive metric cards providing real-time verification statistics with clickable navigation.</p> <p>Cards Overview:</p>"},{"location":"features/dashboard/#1-needs-attention-card","title":"1. Needs Attention Card","text":"<ul> <li>Purpose: Highlights verifications requiring immediate admin action</li> <li>Metrics: <ul> <li>Expired verifications count</li> <li>Revalidation-needed verifications count</li> </ul> </li> <li>Visual: Yellow warning icon with border</li> <li>Action: Clickable - navigates to ID Verification page with \"attention\" tab</li> <li>Data Source: <code>useVerificationStats</code> hook</li> </ul>"},{"location":"features/dashboard/#2-pending-verifications-card","title":"2. Pending Verifications Card","text":"<ul> <li>Purpose: Shows verifications awaiting admin review</li> <li>Metrics: <ul> <li>Total pending verifications count</li> <li>\"Awaiting review\" description</li> </ul> </li> <li>Visual: Blue clock icon with border</li> <li>Action: Clickable - navigates to ID Verification page with \"pending\" status filter</li> <li>Data Source: <code>useVerificationStats</code> hook</li> </ul>"},{"location":"features/dashboard/#3-verified-ids-card","title":"3. Verified IDs Card","text":"<ul> <li>Purpose: Displays successfully approved verifications</li> <li>Metrics: <ul> <li>Total approved verifications count</li> <li>Success rate percentage</li> </ul> </li> <li>Visual: Green check circle icon with border</li> <li>Action: Display only (non-clickable)</li> <li>Data Source: <code>useVerificationStats</code> hook</li> </ul>"},{"location":"features/dashboard/#4-rejected-ids-card","title":"4. Rejected IDs Card","text":"<ul> <li>Purpose: Shows rejected verification attempts</li> <li>Metrics: <ul> <li>Total rejected verifications count</li> <li>\"Rejected verifications\" description</li> </ul> </li> <li>Visual: Red X circle icon with border</li> <li>Action: Display only (non-clickable)</li> <li>Data Source: <code>useVerificationStats</code> hook</li> </ul>"},{"location":"features/dashboard/#crud-operations-navigation","title":"CRUD Operations &amp; Navigation","text":""},{"location":"features/dashboard/#read-operations-dashboard-display","title":"Read Operations (Dashboard Display)","text":"<p>The Dashboard primarily focuses on Read operations, displaying real-time data from various sources:</p>"},{"location":"features/dashboard/#data-retrieval","title":"Data Retrieval","text":"<ul> <li>Verification Statistics - Fetched via <code>useVerificationStats</code> hook</li> <li>System Health Data - Retrieved from <code>/api/system/overview</code> endpoint</li> <li>Recent Activity - Loaded through <code>fetchVerifications</code> service</li> <li>Vehicle Statistics - Retrieved via <code>useVehicleStats</code> hook</li> <li>Account Statistics - Loaded through <code>useAccountStats</code> hook</li> <li>System Activity - Fetched via <code>useSystemActivity</code> hook</li> </ul>"},{"location":"features/dashboard/#data-refresh-operations","title":"Data Refresh Operations","text":"<ul> <li>Manual Refresh - Force refresh all dashboard data using TanStack Query</li> <li>Auto-refresh - Automatic updates every 3 minutes via query intervals</li> <li>Cache Management - Intelligent caching with configurable stale times</li> <li>Error Recovery - Built-in retry mechanisms and error boundaries</li> <li>Background Updates - Automatic refetching on window focus and network reconnection</li> </ul>"},{"location":"features/dashboard/#navigation-operations-quick-actions","title":"Navigation Operations (Quick Actions)","text":"<p>The Dashboard provides direct navigation to key management sections:</p>"},{"location":"features/dashboard/#clickable-statistics-cards","title":"Clickable Statistics Cards","text":"<ul> <li>Needs Attention Card \u2192 <code>/id-verification?tab=attention</code></li> <li>Pending Verifications Card \u2192 <code>/id-verification?status=pending</code></li> </ul>"},{"location":"features/dashboard/#navigation-features","title":"Navigation Features","text":"<ul> <li>Router Integration - Uses Next.js router for navigation</li> <li>State Preservation - Maintains user context across navigation</li> </ul>"},{"location":"features/dashboard/#data-flow","title":"Data Flow","text":""},{"location":"features/dashboard/#dashboard-data-architecture","title":"Dashboard Data Architecture","text":"<pre><code>graph TB\n    subgraph Dashboard[Dashboard Page]\n        DP[DashboardPage Component]\n        SOC[System Overview Card]\n        RC[Recent Verifications Card]\n    end\n\n    subgraph QueryHooks[TanStack Query Hooks]\n        VSH[useVerificationStatsQuery]\n        SOH[useSystemOverviewQuery]\n        VEH[useVehicleStatsQuery]\n        ASH[useAccountStatsQuery]\n        SAH[useSystemActivityQuery]\n        RVH[useRecentVerificationsQuery]\n    end\n\n    subgraph API[API Routes]\n        SO[\"/api/system/overview\"]\n        VH[\"/api/system/health/firebase\"]\n    end\n\n    subgraph DB[Firestore]\n        VC[Verifications Collection]\n        UC[Users Collection]\n        AC[Accounts Collection]\n        VT[Vehicle Types Collection]\n    end\n\n    DP --&gt; SOC\n    DP --&gt; RC\n\n    SOC --&gt; SOH\n    SOC --&gt; VEH\n    SOC --&gt; ASH\n    SOC --&gt; SAH\n\n    RC --&gt; RVH\n\n    VSH --&gt; VC\n    VEH --&gt; VT\n    ASH --&gt; AC\n    SAH --&gt; VH\n    RVH --&gt; VC\n\n    SOH --&gt; SO\n\n    SO --&gt; UC\n    SO --&gt; AC\n    VH --&gt; VC</code></pre> <p>The Dashboard provides comprehensive monitoring and quick access to all Tara-Vel Admin features. Use it as your central command center for platform management.</p> <p>Next: Learn about ID Verification features.</p>"},{"location":"features/id-verification/","title":"ID Verification","text":"<p>The ID Verification system is a section for managing the uploaded IDs. It handles the complete lifecycle of ID verification from submission to approval, including status management, expiration tracking, and discount configuration for different ID types.</p>"},{"location":"features/id-verification/#overview","title":"Overview","text":"<p>The ID Verification system provides administrators with complete control over user identity verification processes:</p> <ul> <li>Verification Management - Complete CRUD operations for verification records</li> <li>Status Control - Approve, reject, disable, and re-enable verifications</li> <li>Expiration Tracking - Manage expiration dates for student IDs</li> <li>Search &amp; Filtering - Advanced search and filtering capabilities</li> <li>Audit Trail - Complete activity logging and audit tracking</li> </ul>"},{"location":"features/id-verification/#verification-types-statuses","title":"Verification Types &amp; Statuses","text":""},{"location":"features/id-verification/#supported-id-types","title":"Supported ID Types","text":"<p>The system supports three main types of identification documents:</p>"},{"location":"features/id-verification/#1-student-id","title":"1. Student ID","text":"<ul> <li>Purpose: Academic institution identification</li> <li>Expiration: one academic year</li> <li>Revalidation: Required periodic revalidation</li> </ul>"},{"location":"features/id-verification/#2-senior-citizen-id","title":"2. Senior Citizen ID","text":"<ul> <li>Purpose: Government-issued senior citizen identification</li> <li>Expiration: No expiration date required</li> <li>Revalidation: Required periodic revalidation</li> </ul>"},{"location":"features/id-verification/#3-pwd-person-with-disability-id","title":"3. PWD (Person with Disability) ID","text":"<ul> <li>Purpose: Government-issued disability identification</li> <li>Expiration: No expiration date required</li> <li>Revalidation: Required periodic revalidation</li> </ul>"},{"location":"features/id-verification/#verification-statuses","title":"Verification Statuses","text":""},{"location":"features/id-verification/#1-pending","title":"1. Pending","text":"<ul> <li>Description: Newly submitted verification awaiting admin review</li> <li>Actions Available: Approve, Reject</li> <li>Next Status: Valid (approved) or Rejected (rejected)</li> </ul>"},{"location":"features/id-verification/#2-valid","title":"2. Valid","text":"<ul> <li>Description: Successfully verified and active ID</li> <li>Actions Available: Update Expiration, Update Discount, Disable ID, Revalidate</li> <li>Next Status: Invalid (disabled) or remains Valid</li> </ul>"},{"location":"features/id-verification/#3-invalid","title":"3. Invalid","text":"<ul> <li>Description: Disabled verification requiring resubmission</li> <li>Actions Available: Enable ID, Update Expiration</li> <li>Next Status: Valid (re-enabled)</li> </ul>"},{"location":"features/id-verification/#4-rejected","title":"4. Rejected","text":"<ul> <li>Description: Verification rejected with reason</li> <li>Actions Available: None (permanent rejection)</li> <li>Next Status: None (final status)</li> </ul>"},{"location":"features/id-verification/#crud-operations","title":"CRUD Operations","text":""},{"location":"features/id-verification/#create-operations","title":"Create Operations","text":""},{"location":"features/id-verification/#new-verification-submission","title":"New Verification Submission","text":"<ul> <li>Source: User mobile app submissions</li> <li>Process: Automatic creation via Firebase and Cloudinary integration</li> <li>Required Fields: ID number, ID type, image URLs, uploader information</li> <li>Status: Automatically set to \"pending\"</li> </ul>"},{"location":"features/id-verification/#read-operations","title":"Read Operations","text":""},{"location":"features/id-verification/#verification-listing","title":"Verification Listing","text":"<ul> <li>Pagination: infinite scrolling</li> <li>Search: Search by ID number, uploader name, ID type, admin who processed verification</li> <li>Filter: Filter by status, ID type, etc.</li> <li>Sorting: Supported sorting by timestamp, updated date, expiration date, or ID number</li> <li>Order: Ascending or descending</li> <li>Caching: TanStack Query cache for performance optimization</li> </ul>"},{"location":"features/id-verification/#individual-verification-details","title":"Individual Verification Details","text":"<ul> <li>Modal View: Detailed verification information</li> <li>Image Display: High-resolution ID image viewing</li> <li>History Tracking: Complete audit trail</li> <li>Status Information: Current status and related metadata</li> </ul>"},{"location":"features/id-verification/#statistics-analytics","title":"Statistics &amp; Analytics","text":"<ul> <li>Dashboard Integration: Real-time verification statistics</li> <li>Status Counts: Pending, valid, invalid, rejected counts</li> </ul>"},{"location":"features/id-verification/#update-operations","title":"Update Operations","text":""},{"location":"features/id-verification/#status-updates","title":"Status Updates","text":"<ul> <li>Approve Verification: Change status from \"pending\" to \"valid\"</li> <li>Reject Verification: Change status from \"pending\" to \"rejected\"</li> <li>Disable Verification: Change status from \"valid\" to \"invalid\"</li> <li>Enable Verification: Change status from \"invalid\" to \"valid\"</li> </ul>"},{"location":"features/id-verification/#delete-operations","title":"Delete Operations","text":""},{"location":"features/id-verification/#verification-removal","title":"Verification Removal","text":"<ul> <li>Access: Admin-only operation</li> <li>Process: Permanent deletion from database</li> <li>Audit: Complete deletion logging</li> <li>Recovery: No automatic recovery (permanent action)</li> </ul>"},{"location":"features/id-verification/#search-filtering-capabilities","title":"Search &amp; Filtering Capabilities","text":""},{"location":"features/id-verification/#search-functionality","title":"Search Functionality","text":""},{"location":"features/id-verification/#text-search","title":"Text Search","text":"<ul> <li>ID Number: Search by verification ID number</li> <li>Uploader Name: Search by user name</li> <li>ID Type: Search by ID type (student, senior, pwd)</li> <li>Case Insensitive: Search works regardless of case</li> <li>Partial Matching: Supports partial text matching</li> </ul>"},{"location":"features/id-verification/#search-implementation","title":"Search Implementation","text":"<ul> <li>Client-Side Filtering: Real-time search results</li> <li>Performance: Optimized for large datasets with TanStack Query</li> <li>Caching: Search results cached for performance</li> <li>Debouncing: Prevents excessive API calls</li> </ul>"},{"location":"features/id-verification/#filtering-options","title":"Filtering Options","text":""},{"location":"features/id-verification/#status-filters","title":"Status Filters","text":"<ul> <li>All: Show all verification statuses</li> <li>Pending: Show only pending verifications</li> <li>Approved: Show only approved verifications</li> <li>Rejected: Show only rejected verifications</li> </ul>"},{"location":"features/id-verification/#id-type-filters","title":"ID Type Filters","text":"<ul> <li>All: Show all ID types</li> <li>Student: Show only student ID verifications</li> <li>Senior: Show only senior citizen ID verifications</li> <li>PWD: Show only PWD ID verifications</li> </ul>"},{"location":"features/id-verification/#date-range-filters","title":"Date Range Filters","text":"<ul> <li>Date From: Filter verifications from specific date</li> <li>Date To: Filter verifications to specific date</li> <li>Timestamp Based: Uses verification submission timestamp</li> <li>Range Validation: Ensures valid date ranges</li> </ul>"},{"location":"features/id-verification/#data-flow","title":"Data Flow","text":""},{"location":"features/id-verification/#verification-processing-architecture","title":"Verification Processing Architecture","text":"<pre><code>graph TB\n    subgraph Submission[Verification Submission]\n        A[User Mobile App]\n        B[Image Upload to Cloudinary]\n        C[Verification Record Creation]\n        D[Status: Pending]\n    end\n\n    subgraph Admin[Admin Processing]\n        E[Admin Dashboard]\n        F[Verification Modal]\n        G[Image Review]\n        H[Status Decision]\n    end\n\n    subgraph Actions[Verification Actions]\n        I[Approve]\n        J[Reject]\n        K[Disable]\n        L[Enable]\n        M[Update Expiration]\n        N[Update Discount]\n        O[Revalidate]\n    end\n\n    subgraph Database[Data Storage]\n        P[Firestore Verifications Collection]\n        Q[Activity Logging]\n        R[Audit Trail]\n    end\n\n    A --&gt; B\n    B --&gt; C\n    C --&gt; D\n    D --&gt; E\n    E --&gt; F\n    F --&gt; G\n    G --&gt; H\n    H --&gt; I\n    H --&gt; J\n    I --&gt; M\n    I --&gt; N\n    I --&gt; O\n    J --&gt; Q\n    K --&gt; Q\n    L --&gt; Q\n    M --&gt; Q\n    N --&gt; Q\n    O --&gt; Q\n    Q --&gt; R\n    P --&gt; R</code></pre>"},{"location":"features/id-verification/#search-filter-data-flow","title":"Search &amp; Filter Data Flow","text":"<pre><code>graph TB\n    subgraph UI[User Interface]\n        A[Search Input]\n        B[Filter Controls]\n        C[Results Display]\n        D[Pagination Controls]\n    end\n\n    subgraph Processing[Data Processing]\n        E[Query Builder]\n        F[Filter Application]\n        G[Search Execution]\n        H[Result Pagination]\n    end\n\n    subgraph Storage[Data Storage]\n        I[Firestore Query]\n        J[Client-Side Filtering]\n        K[Cache Management]\n        L[Result Caching]\n    end\n\n    A --&gt; E\n    B --&gt; F\n    E --&gt; G\n    F --&gt; G\n    G --&gt; I\n    I --&gt; J\n    J --&gt; H\n    H --&gt; C\n    C --&gt; D\n    K --&gt; L\n    L --&gt; C</code></pre>"},{"location":"features/id-verification/#usage-guide","title":"Usage Guide","text":""},{"location":"features/id-verification/#verification-management","title":"Verification Management","text":""},{"location":"features/id-verification/#accessing-id-verification","title":"Accessing ID Verification","text":"<ol> <li>Login - Authenticate with admin credentials</li> <li>Navigate - Go to ID Verification section</li> <li>View List - See all verification submissions</li> <li>Apply Filters - Use search and filter options</li> </ol>"},{"location":"features/id-verification/#processing-verifications","title":"Processing Verifications","text":""},{"location":"features/id-verification/#approving-verifications","title":"Approving Verifications","text":"<ol> <li>Select Verification - Click on verification to open modal</li> <li>Review Details - Check ID number, type, and image</li> <li>Approve - Click approve button to confirm</li> </ol>"},{"location":"features/id-verification/#rejecting-verifications","title":"Rejecting Verifications","text":"<ol> <li>Select Verification - Open verification modal</li> <li>Review Details - Identify issues with verification</li> <li>Reject - Click reject button to confirm</li> <li>Enter Reason - Provide detailed rejection reason</li> </ol>"},{"location":"features/id-verification/#managing-expired-verifications","title":"Managing Expired Verifications","text":"<ol> <li>Filter by Status - Go to \"Needs Attention\" Tab</li> <li>Review Expired - Check expired IDs</li> </ol>"},{"location":"features/id-verification/#search-filter-usage","title":"Search &amp; Filter Usage","text":""},{"location":"features/id-verification/#basic-search","title":"Basic Search","text":"<ol> <li>Enter Search Term - Type in search box</li> <li>Select Search Type - Choose search criteria</li> <li>View Results - Review filtered results</li> <li>Clear Search - Reset to show all verifications</li> </ol>"},{"location":"features/id-verification/#advanced-filtering","title":"Advanced Filtering","text":"<ol> <li>Set Status Filter - Choose verification status</li> <li>Set ID Type Filter - Choose ID type</li> <li>Set Date Range - Choose date range</li> <li>Apply Special Filters - Use attention-needed filters</li> <li>Combine Filters - Use multiple filters together</li> </ol>"},{"location":"features/id-verification/#best-practices","title":"Best Practices","text":""},{"location":"features/id-verification/#verification-processing","title":"Verification Processing","text":"<ul> <li>Review Thoroughly - Check all verification details before approval</li> <li>Document Reasons - Provide clear rejection reasons</li> </ul>"},{"location":"features/id-verification/#search-filter-usage_1","title":"Search &amp; Filter Usage","text":"<ul> <li>Use Specific Terms - Use precise search terms for better results</li> <li>Combine Filters - Use multiple filters for targeted results</li> <li>Clear Filters Regularly - Reset filters to see all verifications</li> </ul>"},{"location":"features/id-verification/#performance-optimization","title":"Performance Optimization","text":"<ul> <li>Use Pagination - Navigate through results efficiently</li> <li>Clear Cache - Refresh TanStack Query cache when needed</li> <li>Monitor System - Check for expired verifications regularly</li> <li>Query Optimization - Use proper query keys for cache management</li> </ul>"},{"location":"features/id-verification/#troubleshooting","title":"Troubleshooting","text":""},{"location":"features/id-verification/#common-issues","title":"Common Issues","text":""},{"location":"features/id-verification/#verification-not-loading","title":"Verification Not Loading","text":"<ul> <li>Check Authentication - Ensure admin login is active</li> <li>Verify Permissions - Confirm admin role assignment</li> <li>Clear Cache - Refresh TanStack Query cache or clear browser storage</li> <li>Check Network - Verify internet connectivity</li> <li>Query State - Check TanStack Query DevTools for query status</li> </ul>"},{"location":"features/id-verification/#search-not-working","title":"Search Not Working","text":"<ul> <li>Check Search Term - Ensure search term is valid</li> <li>Clear Filters - Reset all filters to default</li> <li>Check Database - Verify verification data exists</li> <li>Refresh Page - Reload the verification page</li> </ul>"},{"location":"features/id-verification/#filter-issues","title":"Filter Issues","text":"<ul> <li>Reset Filters - Clear all applied filters</li> <li>Check Date Range - Ensure valid date ranges</li> <li>Verify Status - Check verification status values</li> <li>Clear Cache - Remove TanStack Query cached filter data</li> <li>Query Keys - Verify query key consistency</li> </ul>"},{"location":"features/id-verification/#error-handling","title":"Error Handling","text":""},{"location":"features/id-verification/#verification-processing-errors","title":"Verification Processing Errors","text":"<ul> <li>Network Issues - Check internet connection</li> <li>Permission Errors - Verify admin authentication</li> <li>Database Errors - Check Firestore connectivity</li> <li>Image Loading - Verify Cloudinary image access</li> </ul>"},{"location":"features/id-verification/#search-filter-errors","title":"Search &amp; Filter Errors","text":"<ul> <li>Query Timeout - Reduce search scope or filters</li> <li>Memory Issues - Clear TanStack Query cache</li> <li>Data Inconsistency - Refresh verification data</li> <li>Cache Corruption - Clear all TanStack Query cached data</li> <li>Query Key Issues - Verify query key structure</li> </ul> <p>*The ID Verification system provides comprehensive management of user identity verification processes. *</p> <p>Next: Learn about Vehicle Configuration features.</p>"},{"location":"features/system-logs/","title":"System Logs","text":"<p>The System Logs feature provides searchable, filterable audit logs with pagination, export, and a details modal for deep inspection.</p>"},{"location":"features/system-logs/#overview","title":"Overview","text":"<ul> <li>Search &amp; Filters: Search term, date presets/custom range, level, category, action, resource</li> <li>Pagination: Client-side page/size with next/prev</li> <li>Export: Export current view to CSV/JSON</li> <li>Details Modal: Inspect full log entry with metadata</li> <li>Refresh: Manual refresh with loading indicators</li> </ul>"},{"location":"features/system-logs/#search-filtering","title":"Search &amp; Filtering","text":"<ul> <li>Search term: debounced (300ms)</li> <li>Date range: presets or custom <code>dateFrom</code> / <code>dateTo</code></li> <li>Level: all | info | warn | error</li> </ul>"},{"location":"features/system-logs/#pagination","title":"Pagination","text":"<ul> <li>Client-side, with <code>page</code> and <code>pageSize</code></li> <li>Next/Prev buttons and page indicator</li> </ul>"},{"location":"features/system-logs/#export","title":"Export","text":"<ul> <li>Export current filtered result set</li> <li>CSV or JSON (as implemented)</li> <li>Includes headers and timestamps in ISO</li> </ul>"},{"location":"features/system-logs/#data-flow","title":"Data Flow","text":"<pre><code>graph TB\n    subgraph Page[System Logs Page]\n        SLP[SystemLogsPage]\n        LF[LogsFilters]\n        LT[LogsTable]\n        LP[LogsPagination]\n        LDM[LogDetailsModal]\n    end\n\n    subgraph Store[Redux Store]\n        LogSlice[logs-slice]\n    end\n\n    subgraph DB[Firestore]\n        LA[log_audit collection]\n    end\n\n    SLP --&gt; LF\n    SLP --&gt; LT\n    SLP --&gt; LP\n    SLP --&gt; LDM\n\n    SLP --&gt; LogSlice\n    LogSlice --&gt; LA</code></pre>"},{"location":"features/system-logs/#usage-guide","title":"Usage Guide","text":"<ol> <li>Adjust filters (level, category, date range, user/email)</li> <li>Use search to narrow by message/content</li> <li>Page through results with Next/Prev</li> <li>Click a row to open the Details modal</li> <li>Export current results when needed</li> </ol>"},{"location":"features/system-logs/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>No results? Loosen filters or date range</li> <li>Export disabled? Ensure there are results and you have permissions</li> <li>Slow queries? Narrow the date window or filters</li> </ul> <p>Next: Return to the Dashboard.</p>"},{"location":"features/user-management/","title":"User Management","text":"<p>The User Management feature provides tools for listing, searching, filtering, viewing, and moderating platform users.</p>"},{"location":"features/user-management/#overview","title":"Overview","text":"<ul> <li>User List with search, sorting, and pagination</li> <li>Create User via modal (email, name, role)</li> <li>View User details modal</li> <li>Block/Unblock with reason capture for blocks</li> <li>Delete User with confirmation</li> <li>Refresh &amp; Pagination controls</li> <li>Send Email to users when blocked and unblocked</li> </ul>"},{"location":"features/user-management/#core-operations","title":"Core Operations","text":""},{"location":"features/user-management/#create","title":"Create","text":"<ul> <li>Open Create User Modal</li> <li>Fill email, name, role; submit to create</li> <li>List refreshes after success</li> </ul>"},{"location":"features/user-management/#read","title":"Read","text":"<ul> <li>Paginated list (page, pageSize, next/prev)</li> <li>Search by name/email; filter by status and role</li> <li>View details in a modal</li> </ul>"},{"location":"features/user-management/#update-moderation","title":"Update (Moderation)","text":"<ul> <li>Toggle status: active or blocked</li> <li>When blocking, admin provides a reason</li> <li>Success and error toasts shown; list refreshes</li> </ul>"},{"location":"features/user-management/#delete","title":"Delete","text":"<ul> <li>Open Delete User Modal from row action</li> <li>Confirm to permanently remove the user</li> </ul>"},{"location":"features/user-management/#filters-search","title":"Filters &amp; Search","text":"<ul> <li>Status: all, active, blocked</li> <li>Role: all, admin</li> <li>Search: name or email contains query</li> <li>Sorting supported via table headers</li> </ul>"},{"location":"features/user-management/#pagination","title":"Pagination","text":"<ul> <li>Controls: Previous / Next</li> <li>Displays current page indicator</li> <li>Maintains search/filter state on navigation</li> </ul>"},{"location":"features/user-management/#data-flow","title":"Data Flow","text":"<pre><code>graph TB\n    subgraph Page[Users CRUD Page]\n        UP[UsersCRUDPage]\n        UTable[UsersTable]\n        UFilters[UsersFilters]\n    end\n\n    subgraph Modals[Modals]\n        CreateM[Create User]\n        ViewM[View User]\n        DeleteM[Delete User]\n    end\n\n    subgraph State[State Management]\n        Redux[Redux Store - UI State]\n        TQ[TanStack Query - Server State]\n    end\n\n    subgraph API[API Routes]\n        UGET[GET /api/admin/auth/users]\n        UPOST[POST /api/admin/users]\n        UPATCH[PATCH /api/admin/users/:uid]\n        UDEL[DELETE /api/admin/users/:uid]\n    end\n\n    UP --&gt; UFilters\n    UP --&gt; UTable\n    UP --&gt; CreateM\n    UP --&gt; ViewM\n    UP --&gt; DeleteM\n\n    UP --&gt; Redux\n    UP --&gt; TQ\n    TQ --&gt; UGET\n    TQ --&gt; UPOST\n    TQ --&gt; UPATCH\n    TQ --&gt; UDEL</code></pre>"},{"location":"features/user-management/#usage-guide","title":"Usage Guide","text":"<ol> <li>Use search and filters to narrow users</li> <li>Create new users via the Create modal</li> <li>View details via the View modal</li> <li>Block/Unblock from row actions (add reason for blocks)</li> <li>Delete users with confirmation when needed</li> </ol>"},{"location":"features/user-management/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>No results? </li> <li>Check filters and search query</li> <li>Verify TanStack Query cache isn't stale</li> <li>Try refreshing the query cache</li> <li>Moderation failing? </li> <li>Verify admin permissions and retry</li> <li>Check network connectivity</li> <li>Ensure proper authentication</li> <li>Pagination disabled? </li> <li>No previous/next page available</li> <li>Check query parameters</li> <li>Verify data loading state</li> </ul> <p>Next: Return to the System Logs.</p>"},{"location":"features/vehicle-management/","title":"Vehicle Management","text":"<p>The Vehicle Management section lets administrators manage vehicle types (Bus, Van), including creating, editing, deleting, searching, and filtering vehicle configurations.</p>"},{"location":"features/vehicle-management/#overview","title":"Overview","text":"<ul> <li>Vehicle Types: Manage Bus and Van types with capacity, seating arrangement, and status</li> <li>CRUD Operations: Create, read, update, delete vehicle types</li> <li>Search &amp; Filtering: Search by name/description; filter by status and vehicle type</li> <li>Views: Table and cards view with quick actions</li> <li>Caching: Client-side caching to reduce redundant fetches</li> </ul>"},{"location":"features/vehicle-management/#crud-operations","title":"CRUD Operations","text":""},{"location":"features/vehicle-management/#create","title":"Create","text":"<ul> <li>Open \"Add Vehicle Type\" modal</li> <li>Provide the information required for the vehicle type</li> <li>Submit to save; list updates and cache is refreshed</li> </ul>"},{"location":"features/vehicle-management/#read","title":"Read","text":"<ul> <li>Vehicle types list with table/cards toggle</li> <li>Pagination handled client-side for current dataset</li> <li>Caching: session storage to avoid frequent API calls</li> </ul>"},{"location":"features/vehicle-management/#update","title":"Update","text":"<ul> <li>Click edit on a row/card to open \"Edit Vehicle Type\" modal</li> <li>Update fields and save; state and cache update</li> </ul>"},{"location":"features/vehicle-management/#delete","title":"Delete","text":"<ul> <li>Click delete on row/card to open confirmation modal</li> <li>Confirm to permanently remove the vehicle type</li> </ul>"},{"location":"features/vehicle-management/#search-filtering","title":"Search &amp; Filtering","text":""},{"location":"features/vehicle-management/#search","title":"Search","text":"<ul> <li>Free-text search across <code>name</code> and <code>description</code></li> </ul>"},{"location":"features/vehicle-management/#filters","title":"Filters","text":"<ul> <li>Status: all, active, maintenance, inactive</li> <li>Vehicle Type: all, bus, van</li> </ul>"},{"location":"features/vehicle-management/#combined-logic","title":"Combined Logic","text":"<ul> <li>Results must match search term AND selected filters</li> </ul>"},{"location":"features/vehicle-management/#data-flow","title":"Data Flow","text":""},{"location":"features/vehicle-management/#vehicle-management-architecture","title":"Vehicle Management Architecture","text":"<pre><code>graph TB\n    subgraph Page[Vehicle Management Page]\n        VLP[VehicleListPage]\n        VTTable[VehicleTypesTable]\n        VTCard[VehicleTypeCard]\n    end\n\n    subgraph Modals[Modals]\n        Add[Add Vehicle Type]\n        Edit[Edit Vehicle Type]\n        Del[Delete Vehicle Type]\n    end\n\n    subgraph State[State Management]\n        Redux[Redux Store - UI State]\n        TQ[TanStack Query - Server State]\n    end\n\n    subgraph Data[Data Sources]\n        FS[Firestore Vehicles]\n        Cache[Query Cache]\n    end\n\n    VLP --&gt; VTTable\n    VLP --&gt; VTCard\n    VLP --&gt; Add\n    VLP --&gt; Edit\n    VLP --&gt; Del\n\n    VLP --&gt; Redux\n    VLP --&gt; TQ\n    TQ --&gt; FS\n    TQ --&gt; Cache</code></pre>"},{"location":"features/vehicle-management/#usage-guide","title":"Usage Guide","text":""},{"location":"features/vehicle-management/#managing-vehicle-types","title":"Managing Vehicle Types","text":"<ol> <li>Open Vehicles in the sidebar</li> <li>Use search and filters to narrow results</li> <li>Switch view (Table/Cards) as needed</li> <li>Add/Edit/Delete via the corresponding actions</li> </ol>"},{"location":"features/vehicle-management/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>Not seeing updates? </li> <li>Use the refresh or clear TanStack Query cache</li> <li>Check if data is cached with stale time</li> <li>Verify query invalidation after mutations</li> <li>Edits not saving? </li> <li>Check admin authentication</li> <li>Verify network connectivity</li> <li>Check mutation error handling</li> <li>Missing records? </li> <li>Verify filters and search term</li> <li>Check query parameters</li> <li>Ensure proper data loading state</li> </ul> <p>Next: Learn about Account Management.</p>"},{"location":"getting-started/configuration/","title":"Configuration","text":"<p>This guide covers configuring your Tara-Vel Admin environment after installation.</p>"},{"location":"getting-started/configuration/#environment-variables","title":"Environment Variables","text":""},{"location":"getting-started/configuration/#required-environment-variables","title":"Required Environment Variables","text":"<p>Create a <code>.env.local</code> file in your project root with the following variables:</p> <pre><code># Firebase Configuration\nNEXT_PUBLIC_FIREBASE_API_KEY=your_api_key\nNEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=your_project.firebaseapp.com\nNEXT_PUBLIC_FIREBASE_PROJECT_ID=your_project_id\nNEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=your_project.appspot.com\nNEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=your_sender_id\nNEXT_PUBLIC_FIREBASE_APP_ID=your_app_id\n\n# Firebase Admin SDK (Server-side)\nFIREBASE_ADMIN_PROJECT_ID=your_project_id\nFIREBASE_ADMIN_CLIENT_EMAIL=your_service_account_email\nFIREBASE_ADMIN_PRIVATE_KEY=\"-----BEGIN PRIVATE KEY-----\\nYour private key here\\n-----END PRIVATE KEY-----\\n\"\n\n# Cloudinary Configuration\nNEXT_PUBLIC_CLOUDINARY_CLOUD_NAME=your_cloud_name\nCLOUDINARY_API_KEY=your_api_key\nCLOUDINARY_API_SECRET=your_api_secret\n\n# Email Configuration\nSMTP_HOST=your_smtp_host\nSMTP_PORT=587\nSMTP_USER=your_smtp_user\nSMTP_PASS=your_smtp_password\nSMTP_FROM=noreply@taravel.app\n\n# App Configuration\nNEXT_PUBLIC_APP_URL=http://localhost:3000\nNEXT_PUBLIC_APP_NAME=Tara-Vel Admin\n</code></pre>"},{"location":"getting-started/configuration/#firebase-setup","title":"Firebase Setup","text":""},{"location":"getting-started/configuration/#1-create-firebase-project","title":"1. Create Firebase Project","text":"<ol> <li>Go to Firebase Console</li> <li>Create a new project</li> <li>Enable Authentication, Firestore, and Storage</li> </ol>"},{"location":"getting-started/configuration/#2-configure-authentication","title":"2. Configure Authentication","text":"<pre><code># Enable Email/Password authentication\n# Configure authorized domains\n</code></pre>"},{"location":"getting-started/configuration/#3-set-up-firestore","title":"3. Set up Firestore","text":"<pre><code># Deploy Firestore rules and indexes\nnpm run firebase:deploy-rules-indexes\n</code></pre>"},{"location":"getting-started/configuration/#cloudinary-setup","title":"Cloudinary Setup","text":""},{"location":"getting-started/configuration/#1-create-cloudinary-account","title":"1. Create Cloudinary Account","text":"<ol> <li>Sign up at Cloudinary</li> <li>Get your cloud name, API key, and API secret</li> <li>Add them to your environment variables</li> </ol>"},{"location":"getting-started/configuration/#next-steps","title":"Next Steps","text":"<p>Once configuration is complete:</p> <ol> <li>First Steps - Run the application and explore features</li> <li>Architecture - Understand the system design</li> </ol>"},{"location":"getting-started/first-steps/","title":"First Steps","text":"<p>Now that you have Tara-Vel Admin installed and configured, let's take your first steps with the application.</p>"},{"location":"getting-started/first-steps/#starting-the-application","title":"Starting the Application","text":""},{"location":"getting-started/first-steps/#1-start-development-server","title":"1. Start Development Server","text":"<pre><code># Start the development server\nnpm run dev\n\n# The application will be available at:\n# http://localhost:3000\n</code></pre>"},{"location":"getting-started/first-steps/#2-access-the-application","title":"2. Access the Application","text":"<p>Open your browser and navigate to <code>http://localhost:3000</code>. You should see the login page.</p>"},{"location":"getting-started/first-steps/#initial-setup","title":"Initial Setup","text":""},{"location":"getting-started/first-steps/#1-create-admin-user","title":"1. Create Admin User","text":"<p>The first time you run the application, you'll need to create an admin user:</p> <ol> <li>Go to the Firebase Authentication console</li> <li>Go to the Users tab</li> <li>Create a new user</li> <li>Set the user's email and password</li> <li>Copy the document id of the user</li> <li>Copy the email of the user</li> <li>Go to the Firestore database</li> <li>Go to the users collection</li> <li>create a new entry where the document id matches the user's document id</li> <li>Add the following fields:</li> </ol> <pre><code>  // Firestore metadata fields\n  name: string;\n  role: \"admin\";\n  created_at: string; // current date and time in ISO format\n  status: \"active\";\n</code></pre>"},{"location":"getting-started/first-steps/#2-explore-the-dashboard","title":"2. Explore the Dashboard","text":"<p>Once logged in, you'll see the main dashboard with:</p> <ul> <li>System Overview - Key metrics and statistics</li> <li>Recent Activity - Latest system events</li> <li>Quick Actions - Shortcuts to common tasks</li> </ul>"},{"location":"getting-started/first-steps/#key-features-to-explore","title":"Key Features to Explore","text":""},{"location":"getting-started/first-steps/#1-user-management","title":"1. User Management","text":"<ul> <li>Navigate to Users in the sidebar</li> <li>View existing users</li> <li>Create new users</li> </ul>"},{"location":"getting-started/first-steps/#2-vehicle-management","title":"2. Vehicle Management","text":"<ul> <li>Go to Vehicles section</li> <li>Add vehicle types (Bus, Van)</li> <li>Configure vehicle settings</li> </ul>"},{"location":"getting-started/first-steps/#3-id-verification","title":"3. ID Verification","text":"<ul> <li>Check ID Verification section</li> <li>Review pending verifications</li> <li>Process verification requests</li> </ul>"},{"location":"getting-started/first-steps/#4-system-monitoring","title":"4. System Monitoring","text":"<ul> <li>Explore System Logs</li> <li>Monitor system health</li> <li>Review audit trails</li> </ul>"},{"location":"getting-started/first-steps/#database-operations","title":"Database Operations","text":"<pre><code># View Firestore data\nfirebase firestore:query\n\n# Export data\nnpm run firebase:export-data\n\n# Import data\nnpm run firebase:import-data\n</code></pre>"},{"location":"getting-started/first-steps/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/first-steps/#common-issues","title":"Common Issues","text":"<ol> <li> <p>Port already in use <pre><code># Kill process using port 3000\nnpx kill-port 3000\n</code></pre></p> </li> <li> <p>Firebase connection issues <pre><code># Test Firebase connection\nnpm run firebase:test-admin-sdk\n</code></pre></p> </li> <li> <p>Environment variable issues <pre><code># Verify .env.local exists and has correct values\ncat .env.local\n</code></pre></p> </li> </ol>"},{"location":"getting-started/first-steps/#next-steps","title":"Next Steps","text":"<p>Now that you're familiar with the basics:</p> <ol> <li>Explore Architecture - Learn about the system design</li> <li>Read API Documentation - Understand the available endpoints</li> </ol>"},{"location":"getting-started/first-steps/#getting-help","title":"Getting Help","text":"<p>If you encounter issues:</p> <ul> <li>Review the Architecture Documentation</li> <li>Contact the development team</li> <li>Open an issue on GitHub</li> </ul> <p>Congratulations! You've successfully set up and started using Tara-Vel Admin.</p>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>This guide will walk you through setting up the Tara-Vel Admin development environment from scratch.</p>"},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have the following installed on your system:</p>"},{"location":"getting-started/installation/#required-software","title":"Required Software","text":"<ul> <li>Node.js 18.17 or later</li> <li>npm 9.0 or later (comes with Node.js)</li> <li>Git for version control</li> <li>Firebase CLI for Firebase operations</li> </ul>"},{"location":"getting-started/installation/#optional-but-recommended","title":"Optional but Recommended","text":"<ul> <li>VS Code with recommended extensions</li> <li>Firebase Tools for local development</li> </ul>"},{"location":"getting-started/installation/#step-1-clone-the-repository","title":"Step 1: Clone the Repository","text":"<p>Private Repository Access</p> <p>The Tara-Vel Admin repository is currently private. You'll need to be granted access by the development team to clone the repository.</p> <pre><code># Clone the repository (requires access)\ngit clone https://github.com/Arvss07/taravel-admin-official.git\ncd taravel-admin-official\n\n# Verify you're in the correct directory\ndir\n</code></pre> <p>Access Required</p> <p>If you don't have access to the private repository, contact the development team to request access before proceeding with the installation.</p>"},{"location":"getting-started/installation/#step-2-install-dependencies","title":"Step 2: Install Dependencies","text":"<pre><code># Install all project dependencies\nnpm install\n\n# This will install:\n# - Next.js and React dependencies\n# - UI component libraries (Radix UI, shadcn/ui)\n# - Firebase SDK and admin SDK\n# - Development tools (ESLint, Prettier, etc.)\n</code></pre>"},{"location":"getting-started/installation/#step-3-firebase-cli-setup","title":"Step 3: Firebase CLI Setup","text":"<pre><code># Install Firebase CLI globally\nnpm install -g firebase-tools\n\n# Login to Firebase\nfirebase login\n\n# Verify installation\nfirebase --version\n</code></pre>"},{"location":"getting-started/installation/#step-4-environment-configuration","title":"Step 4: Environment Configuration","text":""},{"location":"getting-started/installation/#create-environment-file","title":"Create Environment File","text":"<pre><code># Copy the example environment file\ncp .env.example .env.local\n</code></pre>"},{"location":"getting-started/installation/#configure-environment-variables","title":"Configure Environment Variables","text":"<p>Edit <code>.env.local</code> with your Firebase project details:</p> <pre><code># Firebase Configuration\nNEXT_PUBLIC_FIREBASE_API_KEY=your_api_key\nNEXT_PUBLIC_FIREBASE_AUTH_DOMAIN=your_project.firebaseapp.com\nNEXT_PUBLIC_FIREBASE_PROJECT_ID=your_project_id\nNEXT_PUBLIC_FIREBASE_STORAGE_BUCKET=your_project.appspot.com\nNEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID=your_sender_id\nNEXT_PUBLIC_FIREBASE_APP_ID=your_app_id\n\n# Firebase Admin SDK (Server-side)\nFIREBASE_ADMIN_PROJECT_ID=your_project_id\nFIREBASE_ADMIN_CLIENT_EMAIL=your_service_account_email\nFIREBASE_ADMIN_PRIVATE_KEY=\"-----BEGIN PRIVATE KEY-----\\nYour private key here\\n-----END PRIVATE KEY-----\\n\"\n\n# Cloudinary Configuration (for image processing)\nNEXT_PUBLIC_CLOUDINARY_CLOUD_NAME=your_cloud_name\nCLOUDINARY_API_KEY=your_api_key\nCLOUDINARY_API_SECRET=your_api_secret\n\n# Email Configuration (for notifications)\nSMTP_HOST=your_smtp_host\nSMTP_PORT=587\nSMTP_USER=your_smtp_user\nSMTP_PASS=your_smtp_password\n\n# App Configuration\nNEXT_PUBLIC_APP_URL=http://localhost:3000\nNEXT_PUBLIC_APP_NAME=Tara-Vel Admin\n</code></pre>"},{"location":"getting-started/installation/#step-5-firebase-project-setup","title":"Step 5: Firebase Project Setup","text":""},{"location":"getting-started/installation/#initialize-firebase-in-your-project","title":"Initialize Firebase in Your Project","text":"<pre><code># Initialize Firebase in your project\nfirebase init\n\n# Select the following services:\n# - Firestore: Configure security rules and indexes\n# - Hosting: Configure files for Firebase Hosting\n# - Functions: Configure a Cloud Functions directory\n</code></pre>"},{"location":"getting-started/installation/#configure-firestore","title":"Configure Firestore","text":"<pre><code># Deploy Firestore rules and indexes\nnpm run firebase:deploy-rules-indexes\n\n# This will deploy:\n# - firestore.rules (security rules)\n# - firestore.indexes.json (database indexes)\n</code></pre>"},{"location":"getting-started/installation/#step-6-verify-installation","title":"Step 6: Verify Installation","text":""},{"location":"getting-started/installation/#start-development-server","title":"Start Development Server","text":"<pre><code># Start the development server\nnpm run dev\n\n# The application will be available at:\n# http://localhost:3000\n</code></pre>"},{"location":"getting-started/installation/#test-firebase-connection","title":"Test Firebase Connection","text":"<pre><code># Test Firebase admin SDK connection\nnpm run firebase:test-admin-sdk\n\n# Test verification system\nnpm run firebase:test-verification\n</code></pre>"},{"location":"getting-started/installation/#step-7-development-tools-setup","title":"Step 7: Development Tools Setup","text":""},{"location":"getting-started/installation/#vs-code-extensions-recommended","title":"VS Code Extensions (Recommended)","text":"<p>Install these VS Code extensions for the best development experience:</p> <pre><code>{\n  \"recommendations\": [\n    \"bradlc.vscode-tailwindcss\",\n    \"esbenp.prettier-vscode\",\n    \"ms-vscode.vscode-typescript-next\",\n    \"firebase.vscode-firebase-explorer\",\n    \"ms-vscode.vscode-json\",\n    \"formulahendry.auto-rename-tag\",\n    \"christian-kohler.path-intellisense\"\n  ]\n}\n</code></pre>"},{"location":"getting-started/installation/#git-hooks-setup","title":"Git Hooks Setup","text":"<pre><code># Install Husky git hooks\nnpm run prepare\n\n# This sets up pre-commit hooks for:\n# - ESLint code linting\n# - Prettier code formatting\n# - Type checking\n</code></pre>"},{"location":"getting-started/installation/#troubleshooting-installation","title":"Troubleshooting Installation","text":""},{"location":"getting-started/installation/#common-issues","title":"Common Issues","text":""},{"location":"getting-started/installation/#nodejs-version-issues","title":"Node.js Version Issues","text":"<pre><code># Check your Node.js version\nnode --version\n\n# If you need to update Node.js, use nvm:\nnvm install 18.17.0\nnvm use 18.17.0\n</code></pre>"},{"location":"getting-started/installation/#firebase-permission-issues","title":"Firebase Permission Issues","text":"<pre><code># Re-authenticate with Firebase\nfirebase logout\nfirebase login\n\n# Check your Firebase project access\nfirebase projects:list\n</code></pre>"},{"location":"getting-started/installation/#dependency-installation-issues","title":"Dependency Installation Issues","text":"<pre><code># Clear npm cache and reinstall\nnpm cache clean --force\nrm -rf node_modules package-lock.json\nnpm install\n</code></pre>"},{"location":"getting-started/installation/#environment-variable-issues","title":"Environment Variable Issues","text":"<pre><code># Verify your .env.local file exists and has correct values\ncat .env.local\n\n# Check for any syntax errors in environment variables\n</code></pre>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<p>Once installation is complete:</p> <ol> <li>Configure your environment - Set up Firebase services</li> <li>Take your first steps - Explore the application</li> <li>Learn the architecture - Understand the system design</li> </ol> <p>Installation complete! Let's move on to configuration.</p>"},{"location":"getting-started/overview/","title":"Overview","text":"<p>Tara-Vel Admin is a comprehensive administrative dashboard designed to manage the Tara-Vel transportation platform. This guide will help you understand the system and get started quickly.</p>"},{"location":"getting-started/overview/#what-is-tara-vel-admin","title":"What is Tara-Vel Admin?","text":"<p>Tara-Vel Admin is a Next.js-based web application that provides administrative tools for:</p> <ul> <li>User Management - Managing platform users and admin</li> <li>Vehicle Management - Creating and Managing vehicle types (Bus or Van)</li> <li>ID Verification - Processing and managing identity verification requests</li> <li>Account Management - Handling organizational accounts and sub-accounts for an organization or individuals that does not belong to an org</li> <li>System Monitoring - Tracking system health, logs, and performance metrics</li> </ul>"},{"location":"getting-started/overview/#key-features","title":"Key Features","text":""},{"location":"getting-started/overview/#dashboard","title":"Dashboard","text":"<ul> <li>Real-time system overview</li> <li>Key performance indicators</li> <li>Recent activity monitoring</li> <li>System health status</li> </ul>"},{"location":"getting-started/overview/#user-management","title":"User Management","text":"<ul> <li>User creation</li> <li>Welcome Email Support</li> <li>Blocking and Unblocking</li> </ul>"},{"location":"getting-started/overview/#vehicle-management","title":"Vehicle Management","text":"<ul> <li>Vehicle type configuration</li> </ul>"},{"location":"getting-started/overview/#id-verification","title":"ID Verification","text":"<ul> <li>Document verification workflow</li> <li>Approval/rejection workflows</li> </ul>"},{"location":"getting-started/overview/#system-monitoring","title":"System Monitoring","text":"<ul> <li>Audit logs</li> <li>Activity monitoring</li> </ul>"},{"location":"getting-started/overview/#architecture-overview","title":"Architecture Overview","text":"<pre><code>graph TB\n    A[Admin Dashboard] --&gt; B[Next.js Frontend]\n    B --&gt; C[Redux Store]\n    B --&gt; D[Firebase Auth]\n    B --&gt; E[Firestore Database]\n    B --&gt; G[Cloudinary]\n\n    C --&gt; H[User State]\n    C --&gt; I[Vehicle State]\n    C --&gt; J[Verification State]\n\n    E --&gt; K[Users Collection]\n    E --&gt; L[Vehicles Collection]\n    E --&gt; M[Verifications Collection]\n    E --&gt; N[Accounts Collection]\n\n    G --&gt; O[User Images]\n    G --&gt; P[ID Documents]\n    G --&gt; Q[Processed Images]</code></pre>"},{"location":"getting-started/overview/#technology-stack","title":"Technology Stack","text":""},{"location":"getting-started/overview/#frontend","title":"Frontend","text":"<ul> <li>Next.js 15 - React framework with App Router</li> <li>React 18 - UI library with hooks and context</li> <li>TypeScript - Type-safe JavaScript</li> <li>Tailwind CSS - Utility-first CSS framework</li> <li>Radix UI - Accessible component primitives</li> <li>shadcn/ui - Pre-built component library</li> </ul>"},{"location":"getting-started/overview/#state-management","title":"State Management","text":"<ul> <li>Redux Toolkit - Predictable state container</li> <li>React Redux - React bindings for Redux</li> </ul>"},{"location":"getting-started/overview/#backend-services","title":"Backend Services","text":"<ul> <li>Firebase Authentication - User authentication</li> <li>Cloud Firestore - NoSQL database</li> <li>Firebase Storage - File storage</li> <li>Cloudinary - Image processing and optimization</li> </ul>"},{"location":"getting-started/overview/#development-tools","title":"Development Tools","text":"<ul> <li>ESLint - Code linting</li> <li>Prettier - Code formatting</li> <li>Husky - Git hooks</li> <li>TypeScript - Static type checking</li> </ul>"},{"location":"getting-started/overview/#getting-started","title":"Getting Started","text":"<p>Ready to start? Follow these steps:</p> <ol> <li>Installation - Set up your development environment</li> <li>Configuration - Configure Firebase and environment variables</li> <li>First Steps - Run the application and explore features</li> </ol>"},{"location":"getting-started/overview/#system-requirements","title":"System Requirements","text":""},{"location":"getting-started/overview/#development-environment","title":"Development Environment","text":"<ul> <li>Node.js 18.17 or later</li> <li>npm 9.0 or later</li> <li>Git for version control</li> </ul>"},{"location":"getting-started/overview/#browser-support","title":"Browser Support","text":"<ul> <li>Chrome 90+</li> <li>Firefox 88+</li> <li>Safari 14+</li> <li>Edge 90+</li> </ul>"},{"location":"getting-started/overview/#firebase-requirements","title":"Firebase Requirements","text":"<ul> <li>Firebase project with Authentication enabled</li> <li>Firestore database configured</li> <li>Service account for admin operations</li> </ul>"},{"location":"getting-started/overview/#cloudinary-requirements","title":"Cloudinary Requirements","text":"<ul> <li>Cloudinary account</li> </ul>"},{"location":"getting-started/overview/#next-steps","title":"Next Steps","text":"<p>Once you have a basic understanding of the system:</p> <ol> <li>Set up your development environment following the Installation Guide</li> <li>Configure Firebase services as detailed in Configuration</li> <li>Explore the architecture in the Architecture section</li> <li>Learn about core features in the Features section</li> </ol>"},{"location":"getting-started/overview/#support","title":"Support","text":"<p>If you need help getting started: - Contact the development team - Open an issue on GitHub</p> <p>Ready to dive in? Let's start with the installation process!</p>"}]}